/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eGyroscope.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eGyroscopeRegister_t)(s3eGyroscopeCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eGyroscopeUnRegister_t)(s3eGyroscopeCallback cbid, s3eCallback fn);
typedef s3eGyroscopeResult(*s3eGyroscopeStart_t)();
typedef s3eGyroscopeResult(*s3eGyroscopeSetSensorDelay_t)(s3eGyroscopeSensorDelay delay);
typedef s3eGyroscopeResult(*s3eGyroscopeStop_t)();

/**
 * struct that gets filled in by s3eGyroscopeRegister
 */
typedef struct s3eGyroscopeFuncs
{
    s3eGyroscopeRegister_t m_s3eGyroscopeRegister;
    s3eGyroscopeUnRegister_t m_s3eGyroscopeUnRegister;
    s3eGyroscopeStart_t m_s3eGyroscopeStart;
    s3eGyroscopeSetSensorDelay_t m_s3eGyroscopeSetSensorDelay;
    s3eGyroscopeStop_t m_s3eGyroscopeStop;
} s3eGyroscopeFuncs;

static s3eGyroscopeFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x5b7d090b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eGyroscope");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x5b7d090b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eGyroscopeAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eGyroscopeRegister(s3eGyroscopeCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(GYROSCOPE_VERBOSE, ("calling s3eGyroscope[0] func: s3eGyroscopeRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eGyroscopeRegister(cbid, fn, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eGyroscopeUnRegister(s3eGyroscopeCallback cbid, s3eCallback fn)
{
    IwTrace(GYROSCOPE_VERBOSE, ("calling s3eGyroscope[1] func: s3eGyroscopeUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eGyroscopeUnRegister(cbid, fn);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eGyroscopeResult s3eGyroscopeStart()
{
    IwTrace(GYROSCOPE_VERBOSE, ("calling s3eGyroscope[2] func: s3eGyroscopeStart"));

    if (!_extLoad())
        return S3E_GYROSCOPE_UNKNOWN_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eGyroscopeResult ret = g_Ext.m_s3eGyroscopeStart();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eGyroscopeResult s3eGyroscopeSetSensorDelay(s3eGyroscopeSensorDelay delay)
{
    IwTrace(GYROSCOPE_VERBOSE, ("calling s3eGyroscope[3] func: s3eGyroscopeSetSensorDelay"));

    if (!_extLoad())
        return S3E_GYROSCOPE_UNKNOWN_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eGyroscopeResult ret = g_Ext.m_s3eGyroscopeSetSensorDelay(delay);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eGyroscopeResult s3eGyroscopeStop()
{
    IwTrace(GYROSCOPE_VERBOSE, ("calling s3eGyroscope[4] func: s3eGyroscopeStop"));

    if (!_extLoad())
        return S3E_GYROSCOPE_UNKNOWN_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eGyroscopeResult ret = g_Ext.m_s3eGyroscopeStop();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
